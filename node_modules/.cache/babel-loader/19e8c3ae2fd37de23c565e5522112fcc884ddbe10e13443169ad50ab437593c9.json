{"ast":null,"code":"import _taggedTemplateLiteral from\"/workspaces/Sudoku-solver-with-Ai/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3;import React,{useState,useEffect}from'react';import styled from'styled-components';import SudokuGrid from'./components/SudokuGrid';import ControlPanel from'./components/ControlPanel';import MessageBox from'./components/MessageBox';import ApiKeyInput from'./components/ApiKeyInput';import{solveSudoku,checkCurrentBoard,generateNewPuzzle,isValid}from'./utils/sudokuUtils';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AppContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  font-family: 'Inter', sans-serif;\\n  background-color: #f0f4f8;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  min-height: 100vh;\\n  padding: 20px;\\n  box-sizing: border-box;\\n\"])));const SudokuContainer=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  background-color: #ffffff;\\n  border-radius: 1rem;\\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\\n  padding: 2rem;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  max-width: 90%;\\n  width: 500px;\\n\"])));const Title=styled.h1(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  font-size: 1.875rem;\\n  font-weight: 700;\\n  color: #1f2937;\\n  margin-bottom: 1.5rem;\\n\"])));// Initial puzzle (0 represents empty cells) - a medium difficulty puzzle\nconst initialPuzzle=[[5,3,0,0,7,0,0,0,0],[6,0,0,1,9,5,0,0,0],[0,9,8,0,0,0,0,6,0],[8,0,0,0,6,0,0,0,3],[4,0,0,8,0,3,0,0,1],[7,0,0,0,2,0,0,0,6],[0,6,0,0,0,0,2,8,0],[0,0,0,4,1,9,0,0,5],[0,0,0,0,8,0,0,7,9]];function App(){const[currentBoard,setCurrentBoard]=useState([]);const[originalBoard,setOriginalBoard]=useState([]);const[message,setMessage]=useState('Ready to play!');const[messageType,setMessageType]=useState('');const[apiKey,setApiKey]=useState('');// Initialize the game\nuseEffect(()=>{const savedKey=localStorage.getItem('gemini_api_key');if(savedKey){setApiKey(savedKey);}// Start with the predefined initial puzzle\nconst initialBoard=JSON.parse(JSON.stringify(initialPuzzle));setOriginalBoard(initialBoard);setCurrentBoard(initialBoard);setMessage('Welcome! Click \"New Game\" or solve this one.');},[]);const showMessage=function(msg){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';setMessage(msg);setMessageType(type);};const handleCellChange=(row,col,value)=>{setCurrentBoard(prev=>{const newBoard=[...prev];newBoard[row]=[...newBoard[row]];newBoard[row][col]=value;return newBoard;});showMessage('Ready to play!');};const handleSolve=()=>{const boardToSolve=JSON.parse(JSON.stringify(currentBoard));showMessage('Solving...','');setTimeout(()=>{if(solveSudoku(boardToSolve)){setCurrentBoard(boardToSolve);showMessage('Puzzle solved!','success');}else{showMessage('Could not solve the puzzle. Check your initial entries!','error');}},100);};const handleCheck=()=>{showMessage('Checking...','');setTimeout(()=>{if(checkCurrentBoard(currentBoard)){showMessage('Looks good! Keep going or you solved it!','success');}else{showMessage('There are errors or empty cells. Keep trying!','error');}},100);};const handleClear=()=>{const clearedBoard=JSON.parse(JSON.stringify(originalBoard));setCurrentBoard(clearedBoard);showMessage('Board cleared!','success');};const handleNewGame=()=>{showMessage('Generating new puzzle...','');setTimeout(()=>{const newPuzzle=generateNewPuzzle();setOriginalBoard(JSON.parse(JSON.stringify(newPuzzle)));setCurrentBoard(JSON.parse(JSON.stringify(newPuzzle)));showMessage('New game started!','success');},100);};const handleGetHint=async()=>{if(!apiKey){showMessage('Please enter your Gemini API key and click Save.','error');return;}showMessage('Getting a hint from AI...','');// Find first empty cell\nlet emptyCell=null;for(let r=0;r<9;r++){for(let c=0;c<9;c++){if(currentBoard[r][c]===0){emptyCell=[r,c];break;}}if(emptyCell)break;}if(!emptyCell){showMessage('The board is already solved! No hints needed.','success');return;}const[row,col]=emptyCell;const prompt=\"Given the following Sudoku board, find a valid number (1-9) that can be placed in row \".concat(row,\", column \").concat(col,\" (0-indexed). Provide the suggested number and a very brief explanation for why it's a good move. Ensure the number is valid according to standard Sudoku rules (no duplicates in row, column, or 3x3 box).\\n\\n    Board:\\n    \").concat(JSON.stringify(currentBoard),\"\\n\\n    Provide the response in JSON format with the following structure:\\n    {\\n      \\\"hintFound\\\": boolean,\\n      \\\"row\\\": number,\\n      \\\"col\\\": number,\\n      \\\"value\\\": number,\\n      \\\"explanation\\\": string,\\n      \\\"message\\\": string\\n    }\\n    If no valid hint can be found for this specific cell, set hintFound to false and provide a message.\");const chatHistory=[{role:\"user\",parts:[{text:prompt}]}];const payload={contents:chatHistory,generationConfig:{responseMimeType:\"application/json\"}};const apiUrl=\"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=\".concat(apiKey);try{const response=await fetch(apiUrl,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});const result=await response.json();if(!response.ok){const detail=result&&result.error&&result.error.message||response.statusText;showMessage(\"AI request failed: \".concat(detail),'error');return;}if(result.candidates&&result.candidates.length>0&&result.candidates[0].content&&result.candidates[0].content.parts&&result.candidates[0].content.parts.length>0){const rawText=result.candidates[0].content.parts[0].text||'';let parsedHint;try{parsedHint=JSON.parse(rawText);}catch(e){showMessage('AI returned an unexpected format. Try again.','error');return;}if(parsedHint.hintFound&&parsedHint.row===row&&parsedHint.col===col&&parsedHint.value>=1&&parsedHint.value<=9&&isValid(currentBoard,parsedHint.value,parsedHint.row,parsedHint.col)){setCurrentBoard(prev=>{const newBoard=[...prev];newBoard[parsedHint.row]=[...newBoard[parsedHint.row]];newBoard[parsedHint.row][parsedHint.col]=parsedHint.value;return newBoard;});showMessage(\"Hint: Place \".concat(parsedHint.value,\" at (\").concat(parsedHint.row+1,\", \").concat(parsedHint.col+1,\"). \").concat(parsedHint.explanation),'success');}else{showMessage(parsedHint.message||'Could not get a useful hint. Try again!','error');}}else{const blocked=result.promptFeedback&&result.promptFeedback.blockReason||'No candidates';showMessage(\"Failed to get a hint from AI (\".concat(blocked,\"). Please try again.\"),'error');}}catch(error){console.error('Error fetching hint:',error);showMessage('An error occurred while getting a hint. Please check your network.','error');}};const handleApiKeySave=key=>{if(!key){localStorage.removeItem('gemini_api_key');setApiKey('');showMessage('API key cleared.','success');}else{localStorage.setItem('gemini_api_key',key);setApiKey(key);showMessage('API key saved locally.','success');}};return/*#__PURE__*/_jsx(AppContainer,{children:/*#__PURE__*/_jsxs(SudokuContainer,{children:[/*#__PURE__*/_jsx(Title,{children:\"Sudoku Game\"}),/*#__PURE__*/_jsx(ApiKeyInput,{onSave:handleApiKeySave,initialValue:apiKey}),/*#__PURE__*/_jsx(SudokuGrid,{board:currentBoard,originalBoard:originalBoard,onCellChange:handleCellChange}),/*#__PURE__*/_jsx(ControlPanel,{onSolve:handleSolve,onCheck:handleCheck,onClear:handleClear,onNewGame:handleNewGame,onGetHint:handleGetHint}),/*#__PURE__*/_jsx(MessageBox,{message:message,type:messageType})]})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","styled","SudokuGrid","ControlPanel","MessageBox","ApiKeyInput","solveSudoku","checkCurrentBoard","generateNewPuzzle","isValid","jsx","_jsx","jsxs","_jsxs","AppContainer","div","_templateObject","_taggedTemplateLiteral","SudokuContainer","_templateObject2","Title","h1","_templateObject3","initialPuzzle","App","currentBoard","setCurrentBoard","originalBoard","setOriginalBoard","message","setMessage","messageType","setMessageType","apiKey","setApiKey","savedKey","localStorage","getItem","initialBoard","JSON","parse","stringify","showMessage","msg","type","arguments","length","undefined","handleCellChange","row","col","value","prev","newBoard","handleSolve","boardToSolve","setTimeout","handleCheck","handleClear","clearedBoard","handleNewGame","newPuzzle","handleGetHint","emptyCell","r","c","prompt","concat","chatHistory","role","parts","text","payload","contents","generationConfig","responseMimeType","apiUrl","response","fetch","method","headers","body","result","json","ok","detail","error","statusText","candidates","content","rawText","parsedHint","e","hintFound","explanation","blocked","promptFeedback","blockReason","console","handleApiKeySave","key","removeItem","setItem","children","onSave","initialValue","board","onCellChange","onSolve","onCheck","onClear","onNewGame","onGetHint"],"sources":["/workspaces/Sudoku-solver-with-Ai/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport SudokuGrid from './components/SudokuGrid';\nimport ControlPanel from './components/ControlPanel';\nimport MessageBox from './components/MessageBox';\nimport ApiKeyInput from './components/ApiKeyInput';\nimport { solveSudoku, checkCurrentBoard, generateNewPuzzle, isValid } from './utils/sudokuUtils';\n\nconst AppContainer = styled.div`\n  font-family: 'Inter', sans-serif;\n  background-color: #f0f4f8;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  padding: 20px;\n  box-sizing: border-box;\n`;\n\nconst SudokuContainer = styled.div`\n  background-color: #ffffff;\n  border-radius: 1rem;\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: 90%;\n  width: 500px;\n`;\n\nconst Title = styled.h1`\n  font-size: 1.875rem;\n  font-weight: 700;\n  color: #1f2937;\n  margin-bottom: 1.5rem;\n`;\n\n// Initial puzzle (0 represents empty cells) - a medium difficulty puzzle\nconst initialPuzzle = [\n  [5, 3, 0, 0, 7, 0, 0, 0, 0],\n  [6, 0, 0, 1, 9, 5, 0, 0, 0],\n  [0, 9, 8, 0, 0, 0, 0, 6, 0],\n  [8, 0, 0, 0, 6, 0, 0, 0, 3],\n  [4, 0, 0, 8, 0, 3, 0, 0, 1],\n  [7, 0, 0, 0, 2, 0, 0, 0, 6],\n  [0, 6, 0, 0, 0, 0, 2, 8, 0],\n  [0, 0, 0, 4, 1, 9, 0, 0, 5],\n  [0, 0, 0, 0, 8, 0, 0, 7, 9]\n];\n\nfunction App() {\n  const [currentBoard, setCurrentBoard] = useState([]);\n  const [originalBoard, setOriginalBoard] = useState([]);\n  const [message, setMessage] = useState('Ready to play!');\n  const [messageType, setMessageType] = useState('');\n  const [apiKey, setApiKey] = useState('');\n\n  // Initialize the game\n  useEffect(() => {\n    const savedKey = localStorage.getItem('gemini_api_key');\n    if (savedKey) {\n      setApiKey(savedKey);\n    }\n    \n    // Start with the predefined initial puzzle\n    const initialBoard = JSON.parse(JSON.stringify(initialPuzzle));\n    setOriginalBoard(initialBoard);\n    setCurrentBoard(initialBoard);\n    setMessage('Welcome! Click \"New Game\" or solve this one.');\n  }, []);\n\n  const showMessage = (msg, type = '') => {\n    setMessage(msg);\n    setMessageType(type);\n  };\n\n  const handleCellChange = (row, col, value) => {\n    setCurrentBoard(prev => {\n      const newBoard = [...prev];\n      newBoard[row] = [...newBoard[row]];\n      newBoard[row][col] = value;\n      return newBoard;\n    });\n    showMessage('Ready to play!');\n  };\n\n  const handleSolve = () => {\n    const boardToSolve = JSON.parse(JSON.stringify(currentBoard));\n    showMessage('Solving...', '');\n    \n    setTimeout(() => {\n      if (solveSudoku(boardToSolve)) {\n        setCurrentBoard(boardToSolve);\n        showMessage('Puzzle solved!', 'success');\n      } else {\n        showMessage('Could not solve the puzzle. Check your initial entries!', 'error');\n      }\n    }, 100);\n  };\n\n  const handleCheck = () => {\n    showMessage('Checking...', '');\n    setTimeout(() => {\n      if (checkCurrentBoard(currentBoard)) {\n        showMessage('Looks good! Keep going or you solved it!', 'success');\n      } else {\n        showMessage('There are errors or empty cells. Keep trying!', 'error');\n      }\n    }, 100);\n  };\n\n  const handleClear = () => {\n    const clearedBoard = JSON.parse(JSON.stringify(originalBoard));\n    setCurrentBoard(clearedBoard);\n    showMessage('Board cleared!', 'success');\n  };\n\n  const handleNewGame = () => {\n    showMessage('Generating new puzzle...', '');\n    setTimeout(() => {\n      const newPuzzle = generateNewPuzzle();\n      setOriginalBoard(JSON.parse(JSON.stringify(newPuzzle)));\n      setCurrentBoard(JSON.parse(JSON.stringify(newPuzzle)));\n      showMessage('New game started!', 'success');\n    }, 100);\n  };\n\n  const handleGetHint = async () => {\n    if (!apiKey) {\n      showMessage('Please enter your Gemini API key and click Save.', 'error');\n      return;\n    }\n\n    showMessage('Getting a hint from AI...', '');\n    \n    // Find first empty cell\n    let emptyCell = null;\n    for (let r = 0; r < 9; r++) {\n      for (let c = 0; c < 9; c++) {\n        if (currentBoard[r][c] === 0) {\n          emptyCell = [r, c];\n          break;\n        }\n      }\n      if (emptyCell) break;\n    }\n\n    if (!emptyCell) {\n      showMessage('The board is already solved! No hints needed.', 'success');\n      return;\n    }\n\n    const [row, col] = emptyCell;\n\n    const prompt = `Given the following Sudoku board, find a valid number (1-9) that can be placed in row ${row}, column ${col} (0-indexed). Provide the suggested number and a very brief explanation for why it's a good move. Ensure the number is valid according to standard Sudoku rules (no duplicates in row, column, or 3x3 box).\n\n    Board:\n    ${JSON.stringify(currentBoard)}\n\n    Provide the response in JSON format with the following structure:\n    {\n      \"hintFound\": boolean,\n      \"row\": number,\n      \"col\": number,\n      \"value\": number,\n      \"explanation\": string,\n      \"message\": string\n    }\n    If no valid hint can be found for this specific cell, set hintFound to false and provide a message.`;\n\n    const chatHistory = [{ role: \"user\", parts: [{ text: prompt }] }];\n\n    const payload = {\n      contents: chatHistory,\n      generationConfig: {\n        responseMimeType: \"application/json\"\n      }\n    };\n\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`;\n\n    try {\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload)\n      });\n\n      const result = await response.json();\n\n      if (!response.ok) {\n        const detail = (result && (result.error && result.error.message)) || response.statusText;\n        showMessage(`AI request failed: ${detail}`, 'error');\n        return;\n      }\n\n      if (result.candidates && result.candidates.length > 0 &&\n          result.candidates[0].content && result.candidates[0].content.parts &&\n          result.candidates[0].content.parts.length > 0) {\n        const rawText = result.candidates[0].content.parts[0].text || '';\n        let parsedHint;\n        try {\n          parsedHint = JSON.parse(rawText);\n        } catch (e) {\n          showMessage('AI returned an unexpected format. Try again.', 'error');\n          return;\n        }\n\n        if (parsedHint.hintFound && parsedHint.row === row && parsedHint.col === col &&\n            parsedHint.value >= 1 && parsedHint.value <= 9 &&\n            isValid(currentBoard, parsedHint.value, parsedHint.row, parsedHint.col)) {\n          setCurrentBoard(prev => {\n            const newBoard = [...prev];\n            newBoard[parsedHint.row] = [...newBoard[parsedHint.row]];\n            newBoard[parsedHint.row][parsedHint.col] = parsedHint.value;\n            return newBoard;\n          });\n          showMessage(`Hint: Place ${parsedHint.value} at (${parsedHint.row + 1}, ${parsedHint.col + 1}). ${parsedHint.explanation}`, 'success');\n        } else {\n          showMessage(parsedHint.message || 'Could not get a useful hint. Try again!', 'error');\n        }\n      } else {\n        const blocked = (result.promptFeedback && result.promptFeedback.blockReason) || 'No candidates';\n        showMessage(`Failed to get a hint from AI (${blocked}). Please try again.`, 'error');\n      }\n    } catch (error) {\n      console.error('Error fetching hint:', error);\n      showMessage('An error occurred while getting a hint. Please check your network.', 'error');\n    }\n  };\n\n  const handleApiKeySave = (key) => {\n    if (!key) {\n      localStorage.removeItem('gemini_api_key');\n      setApiKey('');\n      showMessage('API key cleared.', 'success');\n    } else {\n      localStorage.setItem('gemini_api_key', key);\n      setApiKey(key);\n      showMessage('API key saved locally.', 'success');\n    }\n  };\n\n  return (\n    <AppContainer>\n      <SudokuContainer>\n        <Title>Sudoku Game</Title>\n        <ApiKeyInput onSave={handleApiKeySave} initialValue={apiKey} />\n        <SudokuGrid \n          board={currentBoard} \n          originalBoard={originalBoard}\n          onCellChange={handleCellChange}\n        />\n        <ControlPanel\n          onSolve={handleSolve}\n          onCheck={handleCheck}\n          onClear={handleClear}\n          onNewGame={handleNewGame}\n          onGetHint={handleGetHint}\n        />\n        <MessageBox message={message} type={messageType} />\n      </SudokuContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}