{"ast":null,"code":"import _taggedTemplateLiteral from\"/workspaces/Sudoku-solver-with-Ai/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2;import React from'react';import styled from'styled-components';import{jsx as _jsx}from\"react/jsx-runtime\";const CellContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  font-size: clamp(1rem, 4vw, 1.8rem);\\n  font-weight: 600;\\n  border: 1px solid #d1d5db;\\n  box-sizing: border-box;\\n  background-color: #ffffff;\\n  \\n  /* Thicker borders for 3x3 blocks */\\n  &:nth-child(3n) {\\n    border-right: 3px solid #333;\\n  }\\n  &:nth-child(9n) {\\n    border-right: 1px solid #d1d5db;\\n  }\\n  &:nth-child(n+19):nth-child(-n+27),\\n  &:nth-child(n+46):nth-child(-n+54) {\\n    border-bottom: 3px solid #333;\\n  }\\n  &:nth-child(n+73):nth-child(-n+81) {\\n    border-bottom: 1px solid #d1d5db;\\n  }\\n  &:nth-child(9n) {\\n    border-right: 3px solid #333;\\n  }\\n\\n  \",\"\\n\"])),props=>props.isPrefilled&&\"\\n    background-color: #e5e7eb;\\n    color: #4b5563;\\n    font-weight: 700;\\n  \");const CellInput=styled.input(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100%;\\n  text-align: center;\\n  border: none;\\n  background-color: transparent;\\n  font-size: inherit;\\n  font-weight: inherit;\\n  color: #1f2937;\\n  outline: none;\\n  padding: 0;\\n  margin: 0;\\n  -moz-appearance: textfield;\\n\\n  &::-webkit-outer-spin-button,\\n  &::-webkit-inner-spin-button {\\n    -webkit-appearance: none;\\n    margin: 0;\\n  }\\n\"])));const SudokuCell=_ref=>{let{value,isPrefilled,onChange,onKeyDown}=_ref;return/*#__PURE__*/_jsx(CellContainer,{isPrefilled:isPrefilled,children:/*#__PURE__*/_jsx(CellInput,{type:\"number\",min:\"1\",max:\"9\",maxLength:\"1\",value:value||'',readOnly:isPrefilled,onChange:e=>onChange(e.target.value),onKeyDown:onKeyDown})});};export default SudokuCell;","map":{"version":3,"names":["React","styled","jsx","_jsx","CellContainer","div","_templateObject","_taggedTemplateLiteral","props","isPrefilled","CellInput","input","_templateObject2","SudokuCell","_ref","value","onChange","onKeyDown","children","type","min","max","maxLength","readOnly","e","target"],"sources":["/workspaces/Sudoku-solver-with-Ai/src/components/SudokuCell.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst CellContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: clamp(1rem, 4vw, 1.8rem);\n  font-weight: 600;\n  border: 1px solid #d1d5db;\n  box-sizing: border-box;\n  background-color: #ffffff;\n  \n  /* Thicker borders for 3x3 blocks */\n  &:nth-child(3n) {\n    border-right: 3px solid #333;\n  }\n  &:nth-child(9n) {\n    border-right: 1px solid #d1d5db;\n  }\n  &:nth-child(n+19):nth-child(-n+27),\n  &:nth-child(n+46):nth-child(-n+54) {\n    border-bottom: 3px solid #333;\n  }\n  &:nth-child(n+73):nth-child(-n+81) {\n    border-bottom: 1px solid #d1d5db;\n  }\n  &:nth-child(9n) {\n    border-right: 3px solid #333;\n  }\n\n  ${props => props.isPrefilled && `\n    background-color: #e5e7eb;\n    color: #4b5563;\n    font-weight: 700;\n  `}\n`;\n\nconst CellInput = styled.input`\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  border: none;\n  background-color: transparent;\n  font-size: inherit;\n  font-weight: inherit;\n  color: #1f2937;\n  outline: none;\n  padding: 0;\n  margin: 0;\n  -moz-appearance: textfield;\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nconst SudokuCell = ({ value, isPrefilled, onChange, onKeyDown }) => {\n  return (\n    <CellContainer isPrefilled={isPrefilled}>\n      <CellInput\n        type=\"number\"\n        min=\"1\"\n        max=\"9\"\n        maxLength=\"1\"\n        value={value || ''}\n        readOnly={isPrefilled}\n        onChange={(e) => onChange(e.target.value)}\n        onKeyDown={onKeyDown}\n      />\n    </CellContainer>\n  );\n};\n\nexport default SudokuCell;\n"],"mappings":"4KAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEvC,KAAM,CAAAC,aAAa,CAAGH,MAAM,CAACI,GAAG,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,gsBA8B5BC,KAAK,EAAIA,KAAK,CAACC,WAAW,oFAI3B,CACF,CAED,KAAM,CAAAC,SAAS,CAAGT,MAAM,CAACU,KAAK,CAAAC,gBAAA,GAAAA,gBAAA,CAAAL,sBAAA,+XAmB7B,CAED,KAAM,CAAAM,UAAU,CAAGC,IAAA,EAAiD,IAAhD,CAAEC,KAAK,CAAEN,WAAW,CAAEO,QAAQ,CAAEC,SAAU,CAAC,CAAAH,IAAA,CAC7D,mBACEX,IAAA,CAACC,aAAa,EAACK,WAAW,CAAEA,WAAY,CAAAS,QAAA,cACtCf,IAAA,CAACO,SAAS,EACRS,IAAI,CAAC,QAAQ,CACbC,GAAG,CAAC,GAAG,CACPC,GAAG,CAAC,GAAG,CACPC,SAAS,CAAC,GAAG,CACbP,KAAK,CAAEA,KAAK,EAAI,EAAG,CACnBQ,QAAQ,CAAEd,WAAY,CACtBO,QAAQ,CAAGQ,CAAC,EAAKR,QAAQ,CAACQ,CAAC,CAACC,MAAM,CAACV,KAAK,CAAE,CAC1CE,SAAS,CAAEA,SAAU,CACtB,CAAC,CACW,CAAC,CAEpB,CAAC,CAED,cAAe,CAAAJ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}