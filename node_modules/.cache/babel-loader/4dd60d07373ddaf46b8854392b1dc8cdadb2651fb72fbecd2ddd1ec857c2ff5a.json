{"ast":null,"code":"/**\n * Finds the next empty cell (represented by 0) on the board.\n * @param {Array<Array<number>>} board - The 9x9 Sudoku board.\n * @returns {Array<number>|null} - [row, col] of the empty cell, or null if no empty cells.\n */export function findEmpty(board){for(let r=0;r<9;r++){for(let c=0;c<9;c++){if(board[r][c]===0){return[r,c];}}}return null;// No empty cells found\n}/**\n * Checks if placing a number at a specific position is valid according to Sudoku rules.\n * @param {Array<Array<number>>} board - The 9x9 Sudoku board.\n * @param {number} num - The number to check (1-9).\n * @param {number} row - The row index.\n * @param {number} col - The column index.\n * @returns {boolean} - True if valid, false otherwise.\n */export function isValid(board,num,row,col){// Check row\nfor(let x=0;x<9;x++){if(board[row][x]===num&&x!==col){return false;}}// Check column\nfor(let x=0;x<9;x++){if(board[x][col]===num&&x!==row){return false;}}// Check 3x3 box\nconst startRow=Math.floor(row/3)*3;const startCol=Math.floor(col/3)*3;for(let i=0;i<3;i++){for(let j=0;j<3;j++){if(board[startRow+i][startCol+j]===num&&(startRow+i!==row||startCol+j!==col)){return false;}}}return true;}/**\n * Solves the Sudoku board using a backtracking algorithm.\n * This function modifies the board in place.\n * @param {Array<Array<number>>} board - The 9x9 Sudoku board to solve.\n * @returns {boolean} - True if a solution is found, false otherwise.\n */export function solveSudoku(board){const find=findEmpty(board);if(!find){return true;// No empty cells, puzzle solved\n}const[row,col]=find;for(let num=1;num<=9;num++){if(isValid(board,num,row,col)){board[row][col]=num;if(solveSudoku(board)){return true;// Solution found\n}board[row][col]=0;// Backtrack\n}}return false;// No solution found for this path\n}/**\n * Checks if the current board state is a valid and complete Sudoku solution.\n * @param {Array<Array<number>>} board - The 9x9 Sudoku board.\n * @returns {boolean} - True if the board is completely and correctly filled, false otherwise.\n */export function checkCurrentBoard(board){for(let r=0;r<9;r++){for(let c=0;c<9;c++){const num=board[r][c];if(num===0||!isValid(board,num,r,c)){return false;// Cell is empty or invalid\n}}}return true;// All cells are filled and valid\n}/**\n * Generates a new solvable Sudoku puzzle.\n * This is a simplified generation that fills a board and then removes cells.\n * It might not guarantee a unique solution, but it will be solvable.\n * @returns {Array<Array<number>>} - A new Sudoku puzzle.\n */export function generateNewPuzzle(){let newBoard=Array(9).fill(0).map(()=>Array(9).fill(0));// Fill the board completely using the solver\n// This ensures a valid starting point\nsolveSudoku(newBoard);// Create a deep copy to remove cells from\nlet puzzle=JSON.parse(JSON.stringify(newBoard));// Randomly remove cells to create the puzzle\nlet cellsToRemove=50;// Adjust difficulty here (more cells removed = harder)\nwhile(cellsToRemove>0){const r=Math.floor(Math.random()*9);const c=Math.floor(Math.random()*9);if(puzzle[r][c]!==0){puzzle[r][c]=0;cellsToRemove--;}}return puzzle;}","map":{"version":3,"names":["findEmpty","board","r","c","isValid","num","row","col","x","startRow","Math","floor","startCol","i","j","solveSudoku","find","checkCurrentBoard","generateNewPuzzle","newBoard","Array","fill","map","puzzle","JSON","parse","stringify","cellsToRemove","random"],"sources":["/workspaces/Sudoku-solver-with-Ai/src/utils/sudokuUtils.js"],"sourcesContent":["/**\n * Finds the next empty cell (represented by 0) on the board.\n * @param {Array<Array<number>>} board - The 9x9 Sudoku board.\n * @returns {Array<number>|null} - [row, col] of the empty cell, or null if no empty cells.\n */\nexport function findEmpty(board) {\n  for (let r = 0; r < 9; r++) {\n    for (let c = 0; c < 9; c++) {\n      if (board[r][c] === 0) {\n        return [r, c];\n      }\n    }\n  }\n  return null; // No empty cells found\n}\n\n/**\n * Checks if placing a number at a specific position is valid according to Sudoku rules.\n * @param {Array<Array<number>>} board - The 9x9 Sudoku board.\n * @param {number} num - The number to check (1-9).\n * @param {number} row - The row index.\n * @param {number} col - The column index.\n * @returns {boolean} - True if valid, false otherwise.\n */\nexport function isValid(board, num, row, col) {\n  // Check row\n  for (let x = 0; x < 9; x++) {\n    if (board[row][x] === num && x !== col) {\n      return false;\n    }\n  }\n\n  // Check column\n  for (let x = 0; x < 9; x++) {\n    if (board[x][col] === num && x !== row) {\n      return false;\n    }\n  }\n\n  // Check 3x3 box\n  const startRow = Math.floor(row / 3) * 3;\n  const startCol = Math.floor(col / 3) * 3;\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (board[startRow + i][startCol + j] === num && (startRow + i !== row || startCol + j !== col)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Solves the Sudoku board using a backtracking algorithm.\n * This function modifies the board in place.\n * @param {Array<Array<number>>} board - The 9x9 Sudoku board to solve.\n * @returns {boolean} - True if a solution is found, false otherwise.\n */\nexport function solveSudoku(board) {\n  const find = findEmpty(board);\n  if (!find) {\n    return true; // No empty cells, puzzle solved\n  }\n\n  const [row, col] = find;\n\n  for (let num = 1; num <= 9; num++) {\n    if (isValid(board, num, row, col)) {\n      board[row][col] = num;\n\n      if (solveSudoku(board)) {\n        return true; // Solution found\n      }\n\n      board[row][col] = 0; // Backtrack\n    }\n  }\n  return false; // No solution found for this path\n}\n\n/**\n * Checks if the current board state is a valid and complete Sudoku solution.\n * @param {Array<Array<number>>} board - The 9x9 Sudoku board.\n * @returns {boolean} - True if the board is completely and correctly filled, false otherwise.\n */\nexport function checkCurrentBoard(board) {\n  for (let r = 0; r < 9; r++) {\n    for (let c = 0; c < 9; c++) {\n      const num = board[r][c];\n      if (num === 0 || !isValid(board, num, r, c)) {\n        return false; // Cell is empty or invalid\n      }\n    }\n  }\n  return true; // All cells are filled and valid\n}\n\n/**\n * Generates a new solvable Sudoku puzzle.\n * This is a simplified generation that fills a board and then removes cells.\n * It might not guarantee a unique solution, but it will be solvable.\n * @returns {Array<Array<number>>} - A new Sudoku puzzle.\n */\nexport function generateNewPuzzle() {\n  let newBoard = Array(9).fill(0).map(() => Array(9).fill(0));\n\n  // Fill the board completely using the solver\n  // This ensures a valid starting point\n  solveSudoku(newBoard);\n\n  // Create a deep copy to remove cells from\n  let puzzle = JSON.parse(JSON.stringify(newBoard));\n\n  // Randomly remove cells to create the puzzle\n  let cellsToRemove = 50; // Adjust difficulty here (more cells removed = harder)\n  while (cellsToRemove > 0) {\n    const r = Math.floor(Math.random() * 9);\n    const c = Math.floor(Math.random() * 9);\n    if (puzzle[r][c] !== 0) {\n      puzzle[r][c] = 0;\n      cellsToRemove--;\n    }\n  }\n  return puzzle;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}